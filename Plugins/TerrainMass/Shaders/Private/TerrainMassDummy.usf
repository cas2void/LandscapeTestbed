#include "/Engine/Private/Common.ush"

// return: [-32768, 32767]
float UnpackHeight(float2 InPackedHeight)
{
    return float(((int)round(InPackedHeight.r * 255.0) << 8 | (int)round(InPackedHeight.g * 255.0)) - 32768);
}

// InUnpackedHeight: [-32768, 32767]
// return: ([0, 1], [0, 1])
float2 PackHeight(float InUnpackedHeight)
{
    int IntHeight = (int)clamp(InUnpackedHeight + 32768.0f, 0.0f, 65535.0f);
    return float2((float)(IntHeight >> 8 & 255) / 255.0f, (float)((IntHeight & 255) / 255.0f));
}

//
// Vertex Shader
//
float4 PosScaleBias;
float4 UVScaleBias;
float4 InvTargetSizeAndTextureSize;

void MainVS(in float2 InPosition : ATTRIBUTE0,
    in float2 InTexCoord : ATTRIBUTE1,
    out float2 OutTexCoord : TEXCOORD0,
    out float4 OutPosition : SV_POSITION)
{
	OutPosition.zw = float2(0, 1);
	OutPosition.xy = -1.0f + 2.0f * (PosScaleBias.zw + (InPosition.xy * PosScaleBias.xy)) * InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2(1, -1);
	OutTexCoord.xy = (UVScaleBias.zw + (InTexCoord.xy * UVScaleBias.xy)) * InvTargetSizeAndTextureSize.zw;
}

//
// Pixel Shader
//
Texture2D<float4> SourceTexture;
SamplerState SourceTextureSampler;
Texture2D<float> SideFalloffTexture;
SamplerState SideFalloffTextureSampler;
float2 InvTextureSize;
float3 Center;
float Radius;

void MainPS(in float2 SvTexCoord : TEXCOORD0, in float4 SvPosition : SV_POSITION, out float4 OutColor : SV_Target0)
{
	float4 SourcePixel = SourceTexture.Sample(SourceTextureSampler, SvTexCoord);
	float SourceHeight = UnpackHeight(float2(SourcePixel.r, SourcePixel.g));
	
	float2 CenterTextureSpace = Center * InvTextureSize;
	float2 TerrainTexcoords = SvTexCoord - float2(0.5, 0.5) * InvTextureSize;
	
    float CurrentDist = distance(CenterTextureSpace, TerrainTexcoords);
	float NormalizedDist = saturate(CurrentDist / Radius);
	float2 FalloffTexCoords = float2(1 - NormalizedDist, 0);
	float MappedDist = SideFalloffTexture.Sample(SideFalloffTextureSampler, FalloffTexCoords);
    
	float CompositeHeight = lerp(SourceHeight, Center.z, MappedDist);
	float2 OutputHeight = PackHeight(CompositeHeight);
    
	OutColor = float4(OutputHeight.x, OutputHeight.y, SourcePixel.b, SourcePixel.a);
}