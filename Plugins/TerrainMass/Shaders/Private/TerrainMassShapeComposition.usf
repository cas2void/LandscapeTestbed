#include "/Engine/Private/Common.ush"

// return: [-32768, 32767]
float UnpackHeight(float2 InPackedHeight)
{
    return float(((int)round(InPackedHeight.r * 255) << 8 | (int)round(InPackedHeight.g * 255)) - 32768);
}

// InUnpackedHeight: [-32768, 32767]
// return: ([0, 1], [0, 1])
float2 PackHeight(float InUnpackedHeight)
{
    int IntHeight = (int)clamp(InUnpackedHeight + 32768, 0, 65535);
    return float2((float)(IntHeight >> 8 & 255) / 255.0, (float)(IntHeight & 255) / 255.0);
}

//
// Pixel Shader
//
Texture2D<float4> InputTexture;
SamplerState InputTextureSampler;
Texture2D<float> BlendTexture;
SamplerState BlendTextureSampler;
Texture2D<float> SideFalloffTexture;
SamplerState SideFalloffTextureSampler;
float Elevation;

void MainPS(in float2 SvTexCoord : TEXCOORD0, in float4 SvPosition : SV_POSITION, out float4 OutColor : SV_Target0)
{
    float4 InputPixel = InputTexture.Sample(InputTextureSampler, SvTexCoord);
    float InputHeight = UnpackHeight(float2(InputPixel.r, InputPixel.g));
    
    float BlendWeight = BlendTexture.Sample(BlendTextureSampler, SvTexCoord);
    BlendWeight = saturate(BlendWeight);
	
    //float CurrentDist = distance(CenterTextureSpace, TerrainTexcoords);
	//float NormalizedDist = saturate(CurrentDist / Radius);
	//float2 FalloffTexCoords = float2(1 - NormalizedDist, 0);
	//float MappedDist = SideFalloffTexture.Sample(SideFalloffTextureSampler, FalloffTexCoords);
    
    float CompositeHeight = lerp(InputHeight, Elevation, BlendWeight);
	float2 OutputHeight = PackHeight(CompositeHeight);
    
    OutColor = float4(OutputHeight.x, OutputHeight.y, 0, 1);
}