#include "/Engine/Private/Common.ush"

Texture2D<float4> SourceTexture;
SamplerState SourceTextureSampler;
Texture2D<float2> CanvasTexture;
SamplerState CanvasTextureSampler;
float2 InvTextureSize;

// return: [-32768, 32767]
float UnpackHeight(float2 InPackedHeight)
{
    return float(((int)round(InPackedHeight.r * 255.0) << 8 | (int)round(InPackedHeight.g * 255.0)) - 32768);
}

// InUnpackedHeight: [-32768, 32767]
// return: ([0, 1], [0, 1])
float2 PackHeight(float InUnpackedHeight)
{
    int IntHeight = (int)clamp(InUnpackedHeight + 32768.0f, 0.0f, 65535.0f);
    return float2((float)(IntHeight >> 8 & 255) / 255.0f, (float)((IntHeight & 255) / 255.0f));
}

void MainPS(in float2 SvTexCoord : TEXCOORD0, out float4 OutColor : SV_Target0)
{
	float4 SourcePixel = SourceTexture.Sample(SourceTextureSampler, SvTexCoord);
	float SourceHeight = UnpackHeight(float2(SourcePixel.r, SourcePixel.g));
	
	float2 CanvasPixel = CanvasTexture.Sample(CanvasTextureSampler, SvTexCoord);
	float CanvasHeight = CanvasPixel.r;
	float CanvasAlpha = CanvasPixel.g;
    
	float CompositeHeight = lerp(SourceHeight, CanvasHeight, CanvasAlpha);
	float2 OutputHeight = PackHeight(CompositeHeight);
    
	OutColor = float4(OutputHeight.x, OutputHeight.y, SourcePixel.b, SourcePixel.a);
}